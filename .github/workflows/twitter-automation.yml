name: Twitter Crypto Content Automation

on:
  schedule:
    # Run at 9 AM and 9 PM Beijing time (UTC+8)
    # 9 AM Beijing = 1 AM UTC, 9 PM Beijing = 1 PM UTC
    - cron: '0 1,13 * * *'
  workflow_dispatch:  # Allow manual triggering for testing

env:
  NODE_ENV: production

jobs:
  generate-content:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required for pushing changes
      actions: read    # Required for workflow access
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'automation/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd automation
          npm ci --only=production
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      
      - name: Verify Hugo installation
        run: |
          hugo version
          ls -la
      
      - name: Run Twitter content automation
        env:
          # Twitter API credentials
          TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          
          # Translation service credentials (optional)
          GOOGLE_TRANSLATE_API_KEY: ${{ secrets.GOOGLE_TRANSLATE_API_KEY }}
          AZURE_TRANSLATOR_KEY: ${{ secrets.AZURE_TRANSLATOR_KEY }}
          
          # GitHub configuration
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          
          # Notification settings (optional)
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          EMAIL_SMTP_HOST: ${{ secrets.EMAIL_SMTP_HOST }}
          EMAIL_SMTP_PORT: ${{ secrets.EMAIL_SMTP_PORT }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          
          # Runtime configuration
          NODE_ENV: production
          LOG_LEVEL: info
        run: |
          cd automation
          echo "Starting Twitter crypto content automation..."
          node src/index.js
      
      - name: Verify generated content
        run: |
          echo "Checking for new content files..."
          ls -la content/posts/ || echo "No posts directory found"
          if [ -d "content/posts" ]; then
            echo "Content files:"
            find content/posts -name "*.md" -newer .git/COMMIT_EDITMSG 2>/dev/null || echo "No new content files found"
          fi
      
      - name: Build Hugo site
        run: |
          echo "Building Hugo site..."
          hugo --minify --gc --verbose
          echo "Build completed. Checking output..."
          ls -la public/ || echo "No public directory found"
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          git config --local core.autocrlf false
      
      - name: Check for changes
        id: changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected:"
            git diff --staged --name-only
          fi
      
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # Create commit with detailed message
          TIMESTAMP=$(date +'%Y-%m-%d %H:%M:%S UTC')
          COMMIT_MSG="🤖 Auto-generated crypto content from Twitter trends

          Generated at: $TIMESTAMP
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          
          Files changed:
          $(git diff --staged --name-only | sed 's/^/- /')"
          
          git commit -m "$COMMIT_MSG"
          
          # Push with retry logic
          for i in {1..3}; do
            if git push; then
              echo "Successfully pushed changes"
              break
            else
              echo "Push attempt $i failed, retrying in 10 seconds..."
              sleep 10
              git pull --rebase origin main || true
            fi
          done
      
      - name: Workflow summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes**: ${{ steps.changes.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "content/posts" ]; then
            NEW_FILES=$(find content/posts -name "*.md" -newer .git/COMMIT_EDITMSG 2>/dev/null | wc -l || echo "0")
            echo "- **New articles**: $NEW_FILES" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -d "public" ]; then
            echo "- **Site built**: ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Site built**: ❌" >> $GITHUB_STEP_SUMMARY
          fi